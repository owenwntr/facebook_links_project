library(tidyverse)
library(ggbiplot)
library(haven)
library(sf)
library(ggplot2)
library(labelled)
library(lme4)
library(readxl)
library(pano)
library(margins)
library(corrplot)
library(matrixStats)
library(stringr)

#Subset the links to be only from UK users and save the CSV

#links <- read.table(file = '/Users/owenwinter/Documents/Facebook links project/gadm1_nuts3_counties-gadm1_nuts3_counties-fb-social-connectedness-index-october-2021/gadm1_nuts3_counties_gadm1_nuts3_counties.tsv',
                    #sep = '\t', header = TRUE)

#links <- links[which((startsWith(links$user_loc, "UK"))&(!startsWith(links$user_loc, "UKR"))),]

#write.csv(links, "/Users/owenwinter/Documents/Facebook links project/uk_users.csv")

#Load the links from UK users

links <- read.csv("/Users/owenwinter/Documents/Facebook links project/uk_users.csv")

levels <- read.csv("/Users/owenwinter/Documents/Facebook links project/gadm1_nuts3_counties-gadm1_nuts3_counties-fb-social-connectedness-index-october-2021/gadm1_nuts3_counties_levels.csv")

#Internal links

internal <- links[which(links$user_loc==links$fr_loc),]

#Combine the levels dataset

links$fr_level <- levels$level[match(links$fr_loc,levels$key)]

links$fr_level[which(startsWith(links$fr_loc,"AFG"))] <- "gadm1"
links$fr_level[which(startsWith(links$fr_loc,"MUS"))] <- "gadm1"
links$fr_level[which(is.na(links$fr_level))] <- "country"

#Load NUTS populations

nuts_populations <- read.csv("/Users/owenwinter/Documents/Facebook links project/demo_r_pjanaggr3_1_Data.csv")
nuts_populations$geo_year <- paste(nuts_populations$GEO, nuts_populations$TIME)

#Find the earliest year (2016 or later) with valid population data for NUTS regions

minimum_year <- nuts_populations %>%
  dplyr::group_by(GEO) %>%
  dplyr::summarise(min = min(TIME[which(Value!=":")]))

#Create geo-year keys to merge

minimum_year$geo_year <- paste(minimum_year$GEO, minimum_year$min)

nuts_populations$include <- 0
nuts_populations$include[match(minimum_year$geo_year,nuts_populations$geo_year)] <- 1
nuts_populations$Value <- as.numeric(gsub(",", "", nuts_populations$Value))
pops <- nuts_populations[which(nuts_populations$include==1),]

links$weight <- 1

indexes <- match(links$fr_loc,pops$GEO)[which(!is.na(match(links$fr_loc,pops$GEO)))]

links$weight[which(!is.na(match(links$fr_loc,pops$GEO)))] <- pops$Value[indexes]

ggplot(links, aes(x=weight, y=scaled_sci)) +
  geom_point(alpha=0.001) +
  scale_y_continuous(trans="log") +
  scale_x_continuous(trans="log",limits=c(1000,NA)) +
  geom_smooth()

links$fr_country <- sapply(strsplit(links$fr_loc, split = "(?<=[a-zA-Z])\\s*(?=[0-9])", perl = TRUE), `[`, 1)

france <- c("FRY","FRM","FRL","FRK","FRJ","FRI","FRH","FRG","FRF","FRE","FRD","FRC","FRB")

links$fr_country[which(links$fr_country %in% france)] <- "FR"

germany <- c("DE","DEA","DEB","DEC","DED","DEE","DEF","DEG")

links$fr_country[which(links$fr_country %in% germany)] <- "DE"

italy <- c("ITC","ITF","ITG","ITH","ITI")

links$fr_country[which(links$fr_country %in% italy)] <- "IT"

turkey <- c("TR","TRA","TRB","TRC")

links$fr_country[which(links$fr_country %in% turkey)] <- "TR"

countries <- links %>%
  dplyr::group_by(user_loc,fr_country) %>%
  dplyr::summarise(mean = mean(scaled_sci),
                   weighted_mean = weighted.mean(scaled_sci,weight))

countries_fromuk <- countries[which((startsWith(countries$user_loc, "UK"))&
                                      (!startsWith(countries$user_loc, "UKR"))&
                                      (!startsWith(countries$fr_country, "UK"))),]

df <- data.frame(user_loc = unique(countries_fromuk$user_loc))

for (country in unique(countries_fromuk$fr_country)){
  df[country] <- NA
  for (region in unique(countries_fromuk$user_loc)){
    df[which(df$user_loc==region),country] = log(countries_fromuk[which((countries_fromuk$user_loc==region)&(countries_fromuk$fr_country==country)),"weighted_mean"][[1]])
  }
}

df.pca <- prcomp(df[,c(2:200)], center = TRUE,scale. = TRUE)

ggbiplot(df.pca, labels=df$user_loc)

#Combine EU members

eu_members <- c("AT","BE","BG","HR","CY","DK","EE","FI","FR","DE","EL","HU","IE","IT",
        "LV","LT","LU","MT","NL","PL","PT","RO","SK","SV","ES","SE")

links$eu <- 0
links$eu[which(links$fr_country %in% eu_members)] <- 1

eu_links <- links[which(links$eu==1),] %>%
  dplyr::group_by(user_loc) %>%
  dplyr::summarise(mean = mean(scaled_sci),
                   weighted_mean = weighted.mean(scaled_sci,weight))

map <- read_sf("NUTS_Level_3_(January_2018)_Boundaries (1)")

plot(map$geometry)

map$eu_links <- eu_links$weighted_mean[match(eu_links$user_loc, map$nuts318cd)]

ggplot(data=map, aes(fill=eu_links)) +
  geom_sf(size=0) +
  scale_fill_gradient(trans="log",low="black", high="green") +
  labs(fill="Social \nConnectedness \nwith the EU27\n(log)\n") +
  theme_minimal()

map$internal_links <- internal$scaled_sci[match(internal$user_loc, map$nuts318cd)]

ggplot(data=map, aes(fill=internal_links)) +
  geom_sf(size=0) +
  scale_fill_gradient(trans="log",low="black", high="green") +
  labs(fill="Internal \nConnectedness \n(log)\n") +
  theme_minimal()

ireland <- countries_fromuk[which(countries_fromuk$fr_country=="IE"),]

map$ireland <- ireland$weighted_mean[match(ireland$user_loc, map$nuts318cd)]

pakistan <- countries_fromuk[which(countries_fromuk$fr_country=="PAK"),]
map$pakistan <- pakistan$weighted_mean[match(pakistan$user_loc, map$nuts318cd)]

romania <- countries_fromuk[which(countries_fromuk$fr_country=="RO"),]
map$romania <- romania$weighted_mean[match(romania$user_loc, map$nuts318cd)]

gibraltar <- countries_fromuk[which(countries_fromuk$fr_country=="GIB"),]
map$gibraltar <- gibraltar$weighted_mean[match(gibraltar$user_loc, map$nuts318cd)]

spain <- countries_fromuk[which(countries_fromuk$fr_country=="ES"),]
map$spain <- spain$weighted_mean[match(spain$user_loc, map$nuts318cd)]

spain <- countries_fromuk[which(countries_fromuk$fr_country=="ES"),]
map$spain <- spain$weighted_mean[match(spain$user_loc, map$nuts318cd)]

ggplot(data=map, aes(fill=ireland)) +
  geom_sf(size=0) +
  scale_fill_gradient(trans="log", low="black", high="green") +
  theme_minimal() +
  labs(fill="Social \nConnectedness \nwith the Republic\n of Ireland\n (log)\n")

europe <- read_sf("/Users/owenwinter/Documents/Facebook links project/NUTS_RG_60M_2016_4326_LEVL_3.shp")

cornwall <- links[which((links$user_loc=="UKK30")&(links$fr_level=="nuts3")),]
europe$cornwall <- cornwall$scaled_sci[match(europe$NUTS_ID,cornwall$fr_loc)]

enfield <- links[which((links$user_loc=="UKI54")&(links$fr_level=="nuts3")),]
europe$enfield <- enfield$scaled_sci[match(europe$NUTS_ID,enfield$fr_loc)]

birmingham <- links[which((links$user_loc=="UKG31")&(links$fr_level=="nuts3")),]
europe$birmingham <- birmingham$scaled_sci[match(europe$NUTS_ID,birmingham$fr_loc)]

belfast <- links[which((links$user_loc=="UKN06")&(links$fr_level=="nuts3")),]
europe$belfast <- belfast$scaled_sci[match(europe$NUTS_ID,belfast$fr_loc)]

ggplot(europe, aes(geometry = geometry, fill=belfast)) +
  geom_sf(size=0) +
  xlim(c(-21.5,43)) +
  ylim(c(35,71)) +
  scale_fill_gradient(trans="log", low="black", high="green",
                      labels = scales::number_format(accuracy = 1)) +
  theme_minimal() +
  labs(fill="Social \nConnectedness \nto Belfast \n(log)\n")

#Distances




#BES

la_lookup <- read.csv("/Users/owenwinter/Documents/Facebook links project/Local_Authority_District_(December_2018)_to_NUTS3_to_NUTS2_to_NUTS1_(January_2018)_Lookup_in_United_Kingdom.csv")

bes <- read_dta("/Users/owenwinter/Documents/Facebook links project/BES.dta")

bes <- bes[which(bes$wave9==1),]

irrelevant_waves <- c("W1","W2","W3","W4","W5","W6","W7","W8","W10","W11",
                      "W12","W13","W14","W15","W16","W17","W18","W19","W20","W21")

current <- endsWith(colnames(bes),"W1")

for (wave in irrelevant_waves){
  new <- endsWith(colnames(bes),wave)
  current <- rowAny(cbind(current,new))
}

bes <- bes[,!current]

bes$localauthority <- to_character(bes$oslauaW9)

bes$localauthority[which(bes$localauthority=="Argyll & Bute")] <- "Argyll and Bute"
bes$localauthority[which(bes$localauthority=="Armagh, Banbridge and Craigavon")] <- "Armagh City, Banbridge and Craigavon"
bes$localauthority[which(bes$localauthority=="Dumfries & Galloway")] <- "Dumfries and Galloway"
bes$localauthority[which(bes$localauthority=="Edinburgh, City of")] <- "City of Edinburgh"
bes$localauthority[which(bes$localauthority=="Eilean Siar")] <- "Na h-Eileanan Siar"
bes$localauthority[which(bes$localauthority=="North Down and Ards")] <- "Ards and North Down"
bes$localauthority[which(bes$localauthority=="Perth & Kinross")] <- "Perth and Kinross"
bes$localauthority[which(bes$localauthority=="Rhondda, Cynon, Taff")] <- "Rhondda Cynon Taf"
bes$localauthority[which(bes$localauthority=="Shepway")] <- "Folkestone and Hythe"
bes$localauthority[which(bes$localauthority=="The Vale of Glamorgan")] <- "Vale of Glamorgan"

bes$nuts3 <- la_lookup$NUTS318CD[match(bes$localauthority,la_lookup$LAD18NM)]

bes$eu_links <- eu_links$weighted_mean[match(bes$nuts3,eu_links$user_loc)]
bes$internal_links <- internal$scaled_sci[match(bes$nuts3,internal$user_loc)]

constituencies <- read_excel("Documents/Facebook links project/BES-2015-General-Election-results-file-v2.21.xlsx")

columns <- data.frame(colnames(constituencies[sapply(constituencies, is.numeric)]))
columns$sd <- colSds(as.matrix(constituencies[sapply(constituencies, is.numeric)]), na.rm=FALSE)

variables <- c("c11Population","c11BornEngland","c11BornScotland","c11BornWales","c11CarsNone",
               "c11BornUK","c11BornOther","c11DeprivedNone","c11HealthVeryGood",
               "c11IndustryManufacturing","c11IndustryProfessional",
               "c11IndustryFinance","c11IndustrySocialWork","c11IndustryWholesale",
               "c11IndustryCommunication","c11IndustryEducation","c11IndustryConstruction",
               "c11BornPost2004EU","c11IndustryTransport","c11IndustryAgriculture",
               "c11BornOtherPre2004EU","c11BornIreland")

bes$onscodeW9 <- constid(bes$panoW9, "pa_id","ons_id")

bes[,variables] <- constituencies[match(bes$onscodeW9,constituencies$ONSConstID),variables]

corrplot(cor(bes[,c(variables,"eu_links","internal_links")], use = "complete.obs"))

bes$eu_links_scaled <- bes$eu_links/1000

voted <- bes[which(bes$euRefVoteW9<2),]

euref_true <- read_excel("/Users/owenwinter/Documents/constituencyresults.xlsx")

voted$BREXITLeave16 <- euref_true$BREXITLeave16[match(voted$onscodeW9, euref_true$ons_id)]

const_euref <- voted %>%
  dplyr::group_by(onscodeW9) %>%
  dplyr::summarise(mean = mean(euRefVoteW9),
                   true = weighted.mean(BREXITLeave16, c11Population),
                   count = n())

const_euref$upper <- (const_euref$true+196*sqrt(((1-const_euref$true/100)*const_euref$true/100)/44.5703))/100
const_euref$lower <- (const_euref$true-196*sqrt(((1-const_euref$true/100)*const_euref$true/100)/44.5703))/100

ggplot(data=const_euref, aes(x=true, y=mean)) +
  geom_point() +
  geom_line(aes(x=true,y=upper)) +
  geom_line(aes(x=true,y=lower)) +
  xlim(0,100) +
  ylim(0,1) +
  geom_abline(intercept=0, slope=0.01) +
  geom_smooth(method="lm")

nuts_euref <- voted %>%
  dplyr::group_by(nuts3) %>%
  dplyr::summarise(mean = weighted.mean(euRefVoteW9, wt_new_W9),
                   true = weighted.mean(BREXITLeave16, c11Population),
                   count = n())

ggplot(data=nuts_euref, aes(x=true, y=mean)) +
  geom_point() +
  xlim(0,100) +
  ylim(0,1) +
  geom_abline(intercept=0, slope=0.01) +
  geom_smooth(method="lm")

summary(model <- glmer(euRefVoteW9 ~ log(eu_links) + log(internal_links) +
                 ageW9 +
                 (1|p_edlevelW9) +
                 (1|p_ethnicityW9) +
                 (1|gender) +
                 (1|gorW9) +
                 (1|nuts3),
               data=voted, weight=wt_new_W9, family="binomial"))

summary(model)

model <- glmer(euRefVoteW9 ~ log(eu_links) + log(internal_links) +
                 #c11BornEngland + c11BornScotland + c11BornWales + 
                 c11CarsNone + c11BornOther + c11DeprivedNone + #c11BornUK +
                 c11HealthVeryGood + c11IndustryManufacturing + 
                 c11IndustryProfessional + c11IndustryFinance + 
                 c11IndustrySocialWork + c11IndustryWholesale + 
                 c11IndustryCommunication + c11IndustryEducation + 
                 c11IndustryConstruction + c11BornPost2004EU + 
                 c11IndustryTransport + c11IndustryAgriculture + 
                 c11BornOtherPre2004EU + c11BornIreland + 
                 ageW9 + (1|gender) + (1|p_gross_personalW9) + 
                 (1|p_gross_householdW9) + (1|p_ethnicityW9) + (1|p_housingW9) + 
                 (1|p_sexualityW9) + (1|p_country_birthW9) + (1|gorW9) + 
                 (1|p_disabilityW9) + (1|p_edlevelW9) + (1|p_job_sectorW9) + 
                 (1|p_maritalW9) + (1|p_parentW9) + (1|p_religionW9) + 
                 (1|p_socgradeW9) + (1|p_work_statW9),
              data=voted, weight=wt_new_W9, family="binomial")

summary(model)
ranef(model)

eu_links_range <- seq(from=min(bes$eu_links,na.rm=TRUE), to=max(bes$eu_links,na.rm=TRUE), by=.01)

thirdquartile_logit <- 34.37939 - 0.33953*quantile(bes$c11BornUK,na.rm=TRUE)[[4]] - 8.24503*log(eu_links_range) +
  92.41264*eu_links_range/1000 + 0.07829*quantile(bes$c11BornUK,na.rm=TRUE)[[4]]*log(eu_links_range) - 
  0.79757*quantile(bes$c11BornUK,na.rm=TRUE)[[4]]*eu_links_range/1000 - 10.41898*log(eu_links_range)*eu_links_range/1000 +
  0.08840*quantile(bes$c11BornUK,na.rm=TRUE)[[4]]*log(eu_links_range)*eu_links_range/1000
median_logit <- 34.37939 - 0.33953*median(bes$c11BornUK,na.rm=TRUE) - 8.24503*log(eu_links_range) +
  92.41264*eu_links_range/1000 + 0.07829*median(bes$c11BornUK,na.rm=TRUE)*log(eu_links_range) - 
  0.79757*median(bes$c11BornUK,na.rm=TRUE)*eu_links_range/1000 - 10.41898*log(eu_links_range)*eu_links_range/1000 +
  0.08840*median(bes$c11BornUK,na.rm=TRUE)*log(eu_links_range)*eu_links_range/1000
firstquartile_logit <- 34.37939 - 0.33953*quantile(bes$c11BornUK,na.rm=TRUE)[[2]] - 8.24503*log(eu_links_range) +
  92.41264*eu_links_range/1000 + 0.07829*quantile(bes$c11BornUK,na.rm=TRUE)[[2]]*log(eu_links_range) - 
  0.79757*quantile(bes$c11BornUK,na.rm=TRUE)[[2]]*eu_links_range/1000 - 10.41898*log(eu_links_range)*eu_links_range/1000 +
  0.08840*quantile(bes$c11BornUK,na.rm=TRUE)[[2]]*log(eu_links_range)*eu_links_range/1000

thirdquartile_probs <- exp(thirdquartile_logit)/(1 + exp(thirdquartile_logit))
median_probs <- exp(median_logit)/(1 + exp(median_logit))
firstquartile_probs <- exp(firstquartile_logit)/(1 + exp(firstquartile_logit))

plot(eu_links_range, median_probs, 
     ylim=c(0.2,0.4),
     type="l", 
     lwd=3, 
     lty=2, 
     col="gold", 
     xlab="X1", ylab="P(outcome)", main="Probability of super important outcome")

lines(eu_links_range, thirdquartile_probs, 
      type="l", 
      lwd=3, 
      lty=3, 
      col="turquoise2")

lines(eu_links_range, firstquartile_probs, 
      type="l", 
      lwd=3, 
      lty=3, 
      col="green")
