"0",""
"0","links$fr_level <- levels$level[match(links$fr_loc,levels$key)]"
"0",""
"0","links$fr_level[which(startsWith(links$fr_loc,""AFG""))] <- ""gadm1"""
"0","links$fr_level[which(startsWith(links$fr_loc,""MUS""))] <- ""gadm1"""
"0","links$fr_level[which(is.na(links$fr_level))] <- ""country"""
"0",""
"0","#Load NUTS populations"
"0",""
"0","nuts_populations <- read.csv(""demo_r_pjanaggr3_1_Data.csv"")"
"0","nuts_populations$geo_year <- paste(nuts_populations$GEO, nuts_populations$TIME)"
"0",""
"0","#Find the earliest year (2016 or later) with valid population data for NUTS regions"
"0",""
"0","minimum_year <- nuts_populations %>%"
"0","  dplyr::group_by(GEO) %>%"
"0","  dplyr::summarise(min = min(TIME[which(Value!="":"")]))"
"0",""
"0","#Create geo-year keys to merge"
"0",""
"0","minimum_year$geo_year <- paste(minimum_year$GEO, minimum_year$min)"
"0",""
"0","nuts_populations$include <- 0"
"0","nuts_populations$include[match(minimum_year$geo_year,nuts_populations$geo_year)] <- 1"
"0","nuts_populations$Value <- as.numeric(gsub("","", """", nuts_populations$Value))"
"0","pops <- nuts_populations[which(nuts_populations$include==1),]"
"0",""
"0","links$weight <- 1"
"0",""
"0","indexes <- match(links$fr_loc,pops$GEO)[which(!is.na(match(links$fr_loc,pops$GEO)))]"
"0",""
"0","links$weight[which(!is.na(match(links$fr_loc,pops$GEO)))] <- pops$Value[indexes]"
"0",""
"0","links$fr_country <- sapply(strsplit(links$fr_loc, split = ""(?<=[a-zA-Z])\\s*(?=[0-9])"", perl = TRUE), `[`, 1)"
"0",""
"0","france <- c(""FRY"",""FRM"",""FRL"",""FRK"",""FRJ"",""FRI"",""FRH"",""FRG"",""FRF"",""FRE"",""FRD"",""FRC"",""FRB"")"
"0",""
"0","links$fr_country[which(links$fr_country %in% france)] <- ""FR"""
"0",""
"0","germany <- c(""DE"",""DEA"",""DEB"",""DEC"",""DED"",""DEE"",""DEF"",""DEG"")"
"0",""
"0","links$fr_country[which(links$fr_country %in% germany)] <- ""DE"""
"0",""
"0","italy <- c(""ITC"",""ITF"",""ITG"",""ITH"",""ITI"")"
"0",""
"0","links$fr_country[which(links$fr_country %in% italy)] <- ""IT"""
"0",""
"0","turkey <- c(""TR"",""TRA"",""TRB"",""TRC"")"
"0",""
"0","links$fr_country[which(links$fr_country %in% turkey)] <- ""TR"""
"0",""
"0","united_kingdom <- c(""UKC"",""UKD"",""UKE"",""UKF"",""UKG"",""UKH"",""UKI"",""UKJ"",""UKK"",""UKL"","
"0","                    ""UKM"",""UKN"")"
"0",""
"0","links$fr_country[which(links$fr_country %in% united_kingdom)] <- ""UK"""
"0",""
"0","countries <- links %>%"
"0","  dplyr::group_by(user_loc,fr_country) %>%"
"0","  dplyr::summarise(mean = mean(scaled_sci),"
"0","                   weighted_mean = weighted.mean(scaled_sci,weight))"
"1","[38;5;232m`summarise()` has grouped output by 'user_loc'. You can override using the `.groups`
argument.[39m
"
"0","countries_fromuk <- countries[which((startsWith(countries$user_loc, ""UK""))&"
"0","                                      (!startsWith(countries$user_loc, ""UKR""))&"
"0","                                      (!startsWith(countries$fr_country, ""UK""))),]"
"0",""
"0","kable(head(countries_fromuk[order(-countries_fromuk$weighted_mean),]),"
"0","      caption=""\\label{table:countrySCI}Highest SCI scores between UK regions and other countries"","
"0","      col.names=c(""UK Region"",""Country"",""Mean SCI"",""Population Weighted Mean SCI""),"
"0","      row.names=FALSE,"
"0","      digits=0)"
